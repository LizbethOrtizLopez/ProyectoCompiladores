
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND BOOLDCL BOOLVAL BOOLVAL ELIF ELSE EQ FLOATDCL FNUMBER FOR GE GT IF INTDCL INUMBER LE LT NAME NE OR PRINT WHILEprog : stmtsstmts : statement stmts\n             | statement statement : INTDCL NAME ";" \n                 | INTDCL NAME "=" expression ";" statement : FLOATDCL NAME ";"\n                 | FLOATDCL NAME "=" expression ";" statement : BOOLDCL NAME ";"\n                 | BOOLDCL NAME "=" boolexp ";" statement : WHILE "(" boolexp ")" "{" stmts "}" statement : FOR "(" statement boolexp ";" statement ")" "{" stmts "}" statement : PRINT expression ";"statement : IF "(" boolexp ")" "{" stmts "}"statement : IF "(" boolexp ")" "{" stmts "}" ELSE "{" stmts "}"elifstatement : ELIF "(" boolexp ")" "{" stmts "}" elifstatement\n                 | ELIF "(" boolexp ")" "{" stmts "}" statement : IF "(" boolexp ")" "{" stmts "}" elifstatement ELSE "{" stmts "}"statement : NAME "=" expression ";"expression : \'(\' expression \')\'expression : expression \'+\' expression\n                  | expression \'-\' expression\n                  | expression \'*\' expression\n                  | expression \'/\' expression\n                  | expression \'^\' expressionboolexp : expression GT expression\n                  | expression LT expression\n                  | expression GE expression\n                  | expression LE expression\n                  | expression EQ expression\n                  | expression NE expressionboolexp : boolexp AND boolexp\n                  | boolexp OR boolexpexpression : INUMBERexpression : FNUMBERexpression : boolexpboolexp : BOOLVALexpression : NAME'
    
_lr_action_items = {'INTDCL':([0,3,18,27,30,32,37,54,74,75,76,77,78,79,83,85,86,91,94,96,98,101,102,],[4,4,4,-4,-6,-8,-12,-18,-5,-7,-9,4,4,4,-10,-13,4,4,-11,4,-14,-17,4,]),'FLOATDCL':([0,3,18,27,30,32,37,54,74,75,76,77,78,79,83,85,86,91,94,96,98,101,102,],[6,6,6,-4,-6,-8,-12,-18,-5,-7,-9,6,6,6,-10,-13,6,6,-11,6,-14,-17,6,]),'BOOLDCL':([0,3,18,27,30,32,37,54,74,75,76,77,78,79,83,85,86,91,94,96,98,101,102,],[7,7,7,-4,-6,-8,-12,-18,-5,-7,-9,7,7,7,-10,-13,7,7,-11,7,-14,-17,7,]),'WHILE':([0,3,18,27,30,32,37,54,74,75,76,77,78,79,83,85,86,91,94,96,98,101,102,],[8,8,8,-4,-6,-8,-12,-18,-5,-7,-9,8,8,8,-10,-13,8,8,-11,8,-14,-17,8,]),'FOR':([0,3,18,27,30,32,37,54,74,75,76,77,78,79,83,85,86,91,94,96,98,101,102,],[9,9,9,-4,-6,-8,-12,-18,-5,-7,-9,9,9,9,-10,-13,9,9,-11,9,-14,-17,9,]),'PRINT':([0,3,18,27,30,32,37,54,74,75,76,77,78,79,83,85,86,91,94,96,98,101,102,],[10,10,10,-4,-6,-8,-12,-18,-5,-7,-9,10,10,10,-10,-13,10,10,-11,10,-14,-17,10,]),'IF':([0,3,18,27,30,32,37,54,74,75,76,77,78,79,83,85,86,91,94,96,98,101,102,],[11,11,11,-4,-6,-8,-12,-18,-5,-7,-9,11,11,11,-10,-13,11,11,-11,11,-14,-17,11,]),'NAME':([0,3,4,6,7,10,14,17,18,20,26,27,28,30,31,32,33,36,37,38,39,40,41,42,43,44,45,46,47,48,50,51,54,74,75,76,77,78,79,83,85,86,91,93,94,96,98,101,102,],[5,5,13,15,16,24,24,24,5,24,24,-4,24,-6,24,-8,24,24,-12,24,24,24,24,24,24,24,24,24,24,24,24,24,-18,-5,-7,-9,5,5,5,-10,-13,5,5,24,-11,5,-14,-17,5,]),'$end':([1,2,3,12,27,30,32,37,54,74,75,76,83,85,94,98,101,],[0,-1,-3,-2,-4,-6,-8,-12,-18,-5,-7,-9,-10,-13,-11,-14,-17,]),'}':([3,12,27,30,32,37,54,74,75,76,80,82,83,85,90,94,95,98,99,101,103,],[-3,-2,-4,-6,-8,-12,-18,-5,-7,-9,83,85,-10,-13,94,-11,98,-14,101,-17,104,]),'=':([5,13,15,16,],[14,28,31,33,]),'(':([8,9,10,11,14,17,20,26,27,28,30,31,32,33,36,37,38,39,40,41,42,43,44,45,46,47,48,50,51,54,74,75,76,83,85,89,93,94,98,101,],[17,18,20,26,20,20,20,20,-4,20,-6,20,-8,20,20,-12,20,20,20,20,20,20,20,20,20,20,20,20,20,-18,-5,-7,-9,-10,-13,93,20,-11,-14,-17,]),'INUMBER':([10,14,17,20,26,27,28,30,31,32,33,36,37,38,39,40,41,42,43,44,45,46,47,48,50,51,54,74,75,76,83,85,93,94,98,101,],[21,21,21,21,21,-4,21,-6,21,-8,21,21,-12,21,21,21,21,21,21,21,21,21,21,21,21,21,-18,-5,-7,-9,-10,-13,21,-11,-14,-17,]),'FNUMBER':([10,14,17,20,26,27,28,30,31,32,33,36,37,38,39,40,41,42,43,44,45,46,47,48,50,51,54,74,75,76,83,85,93,94,98,101,],[22,22,22,22,22,-4,22,-6,22,-8,22,22,-12,22,22,22,22,22,22,22,22,22,22,22,22,22,-18,-5,-7,-9,-10,-13,22,-11,-14,-17,]),'BOOLVAL':([10,14,17,20,26,27,28,30,31,32,33,36,37,38,39,40,41,42,43,44,45,46,47,48,50,51,54,74,75,76,83,85,93,94,98,101,],[25,25,25,25,25,-4,25,-6,25,-8,25,25,-12,25,25,25,25,25,25,25,25,25,25,25,25,25,-18,-5,-7,-9,-10,-13,25,-11,-14,-17,]),';':([13,15,16,19,21,22,23,24,25,29,53,55,56,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,],[27,30,32,37,-33,-34,-35,-37,-36,54,74,75,76,78,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-19,-31,-32,]),'+':([19,21,22,23,24,25,29,34,35,49,52,53,55,56,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,97,],[38,-33,-34,-35,-37,-36,38,-35,38,38,-35,38,38,-35,-35,38,38,38,38,38,38,38,38,38,38,38,-19,-31,-32,-35,]),'-':([19,21,22,23,24,25,29,34,35,49,52,53,55,56,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,97,],[39,-33,-34,-35,-37,-36,39,-35,39,39,-35,39,39,-35,-35,39,39,39,39,39,39,39,39,39,39,39,-19,-31,-32,-35,]),'*':([19,21,22,23,24,25,29,34,35,49,52,53,55,56,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,97,],[40,-33,-34,-35,-37,-36,40,-35,40,40,-35,40,40,-35,-35,40,40,40,40,40,40,40,40,40,40,40,-19,-31,-32,-35,]),'/':([19,21,22,23,24,25,29,34,35,49,52,53,55,56,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,97,],[41,-33,-34,-35,-37,-36,41,-35,41,41,-35,41,41,-35,-35,41,41,41,41,41,41,41,41,41,41,41,-19,-31,-32,-35,]),'^':([19,21,22,23,24,25,29,34,35,49,52,53,55,56,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,97,],[42,-33,-34,-35,-37,-36,42,-35,42,42,-35,42,42,-35,-35,42,42,42,42,42,42,42,42,42,42,42,-19,-31,-32,-35,]),'GT':([19,21,22,23,24,25,29,34,35,49,52,53,55,56,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,97,],[43,-33,-34,-35,-37,-36,43,-35,43,43,-35,43,43,-35,-35,43,43,43,43,43,43,43,43,43,43,43,-19,-31,-32,-35,]),'LT':([19,21,22,23,24,25,29,34,35,49,52,53,55,56,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,97,],[44,-33,-34,-35,-37,-36,44,-35,44,44,-35,44,44,-35,-35,44,44,44,44,44,44,44,44,44,44,44,-19,-31,-32,-35,]),'GE':([19,21,22,23,24,25,29,34,35,49,52,53,55,56,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,97,],[45,-33,-34,-35,-37,-36,45,-35,45,45,-35,45,45,-35,-35,45,45,45,45,45,45,45,45,45,45,45,-19,-31,-32,-35,]),'LE':([19,21,22,23,24,25,29,34,35,49,52,53,55,56,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,97,],[46,-33,-34,-35,-37,-36,46,-35,46,46,-35,46,46,-35,-35,46,46,46,46,46,46,46,46,46,46,46,-19,-31,-32,-35,]),'EQ':([19,21,22,23,24,25,29,34,35,49,52,53,55,56,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,97,],[47,-33,-34,-35,-37,-36,47,-35,47,47,-35,47,47,-35,-35,47,47,47,47,47,47,47,47,47,47,47,-19,-31,-32,-35,]),'NE':([19,21,22,23,24,25,29,34,35,49,52,53,55,56,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,97,],[48,-33,-34,-35,-37,-36,48,-35,48,48,-35,48,48,-35,-35,48,48,48,48,48,48,48,48,48,48,48,-19,-31,-32,-35,]),')':([21,22,23,24,25,27,30,32,34,37,49,52,54,59,60,61,62,63,64,65,66,67,68,69,70,71,72,74,75,76,81,83,85,94,97,98,101,],[-33,-34,-35,-37,-36,-4,-6,-8,57,-12,70,73,-18,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-19,-31,-32,-5,-7,-9,84,-10,-13,-11,100,-14,-17,]),'AND':([21,22,23,24,25,34,52,56,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,97,],[-33,-34,50,-37,-36,50,50,50,50,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-19,50,50,50,]),'OR':([21,22,23,24,25,34,52,56,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,97,],[-33,-34,51,-37,-36,51,51,51,51,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-19,51,51,51,]),'{':([57,73,84,87,92,100,],[77,79,86,91,96,102,]),'ELSE':([85,88,104,105,],[87,92,-16,-15,]),'ELIF':([85,104,],[89,89,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'prog':([0,],[1,]),'stmts':([0,3,77,79,86,91,96,102,],[2,12,80,82,90,95,99,103,]),'statement':([0,3,18,77,78,79,86,91,96,102,],[3,3,36,3,81,3,3,3,3,3,]),'expression':([10,14,17,20,26,28,31,33,36,38,39,40,41,42,43,44,45,46,47,48,50,51,93,],[19,29,35,49,35,53,55,35,35,59,60,61,62,63,64,65,66,67,68,69,35,35,35,]),'boolexp':([10,14,17,20,26,28,31,33,36,38,39,40,41,42,43,44,45,46,47,48,50,51,93,],[23,23,34,23,52,23,23,56,58,23,23,23,23,23,23,23,23,23,23,23,71,72,97,]),'elifstatement':([85,104,],[88,105,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> prog","S'",1,None,None,None),
  ('prog -> stmts','prog',1,'p_prog','compi.py',103),
  ('stmts -> statement stmts','stmts',2,'p_statements_recursion','compi.py',110),
  ('stmts -> statement','stmts',1,'p_statements_recursion','compi.py',111),
  ('statement -> INTDCL NAME ;','statement',3,'p_dcl_declare_int','compi.py',121),
  ('statement -> INTDCL NAME = expression ;','statement',5,'p_dcl_declare_int','compi.py',122),
  ('statement -> FLOATDCL NAME ;','statement',3,'p_statement_declare_float','compi.py',141),
  ('statement -> FLOATDCL NAME = expression ;','statement',5,'p_statement_declare_float','compi.py',142),
  ('statement -> BOOLDCL NAME ;','statement',3,'p_statement_declare_bool','compi.py',162),
  ('statement -> BOOLDCL NAME = boolexp ;','statement',5,'p_statement_declare_bool','compi.py',163),
  ('statement -> WHILE ( boolexp ) { stmts }','statement',7,'p_statement_while','compi.py',183),
  ('statement -> FOR ( statement boolexp ; statement ) { stmts }','statement',10,'p_statement_for','compi.py',191),
  ('statement -> PRINT expression ;','statement',3,'p_statement_print','compi.py',201),
  ('statement -> IF ( boolexp ) { stmts }','statement',7,'p_statement_if','compi.py',208),
  ('statement -> IF ( boolexp ) { stmts } ELSE { stmts }','statement',11,'p_statement_if_else','compi.py',218),
  ('elifstatement -> ELIF ( boolexp ) { stmts } elifstatement','elifstatement',8,'p_statement_elifRecurssive','compi.py',231),
  ('elifstatement -> ELIF ( boolexp ) { stmts }','elifstatement',7,'p_statement_elifRecurssive','compi.py',232),
  ('statement -> IF ( boolexp ) { stmts } elifstatement ELSE { stmts }','statement',12,'p_statement_elif','compi.py',243),
  ('statement -> NAME = expression ;','statement',4,'p_statement_assign','compi.py',258),
  ('expression -> ( expression )','expression',3,'p_expression_group','compi.py',277),
  ('expression -> expression + expression','expression',3,'p_expression_binop','compi.py',281),
  ('expression -> expression - expression','expression',3,'p_expression_binop','compi.py',282),
  ('expression -> expression * expression','expression',3,'p_expression_binop','compi.py',283),
  ('expression -> expression / expression','expression',3,'p_expression_binop','compi.py',284),
  ('expression -> expression ^ expression','expression',3,'p_expression_binop','compi.py',285),
  ('boolexp -> expression GT expression','boolexp',3,'p_expression_compar','compi.py',319),
  ('boolexp -> expression LT expression','boolexp',3,'p_expression_compar','compi.py',320),
  ('boolexp -> expression GE expression','boolexp',3,'p_expression_compar','compi.py',321),
  ('boolexp -> expression LE expression','boolexp',3,'p_expression_compar','compi.py',322),
  ('boolexp -> expression EQ expression','boolexp',3,'p_expression_compar','compi.py',323),
  ('boolexp -> expression NE expression','boolexp',3,'p_expression_compar','compi.py',324),
  ('boolexp -> boolexp AND boolexp','boolexp',3,'p_expression_boolop','compi.py',364),
  ('boolexp -> boolexp OR boolexp','boolexp',3,'p_expression_boolop','compi.py',365),
  ('expression -> INUMBER','expression',1,'p_expression_inumber','compi.py',380),
  ('expression -> FNUMBER','expression',1,'p_expression_fnumber','compi.py',389),
  ('expression -> boolexp','expression',1,'p_expression_boolval','compi.py',397),
  ('boolexp -> BOOLVAL','boolexp',1,'p_bool_expression','compi.py',401),
  ('expression -> NAME','expression',1,'p_expression_name','compi.py',409),
]
