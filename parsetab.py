
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND BOOLDCL BOOLVAL BOOLVAL ELSE EQ FLOATDCL FNUMBER GE GT IF INTDCL INUMBER LE LT NAME NE OR PRINT WHILEprog : stmtsstmts : statement stmts\n             | statement statement : INTDCL NAME ";" \n                 | INTDCL NAME "=" expression ";" statement : FLOATDCL NAME ";"\n                 | FLOATDCL NAME "=" expression ";" statement : BOOLDCL NAME ";"\n                 | BOOLDCL NAME "=" boolexp ";" statement : WHILE "(" boolexp ")" "{" stmts "}" statement : PRINT expression ";"statement : IF "(" boolexp ")" "{" stmts "}"statement : IF "(" boolexp ")" "{" stmts "}" ELSE "{" stmts "}"statement : NAME "=" expression ";"expression : \'(\' expression \')\'expression : expression \'+\' expression\n                  | expression \'-\' expression\n                  | expression \'*\' expression\n                  | expression \'/\' expression\n                  | expression \'^\' expressionboolexp : expression GT expression\n                  | expression LT expression\n                  | expression GE expression\n                  | expression LE expression\n                  | expression EQ expression\n                  | expression NE expressionboolexp : boolexp AND boolexp\n                  | boolexp OR boolexpexpression : INUMBERexpression : FNUMBERexpression : boolexpboolexp : BOOLVALexpression : NAME'
    
_lr_action_items = {'INTDCL':([0,3,25,28,30,34,51,70,71,72,73,74,77,78,80,82,],[4,4,-4,-6,-8,-11,-14,-5,-7,-9,4,4,-10,-12,4,-13,]),'FLOATDCL':([0,3,25,28,30,34,51,70,71,72,73,74,77,78,80,82,],[6,6,-4,-6,-8,-11,-14,-5,-7,-9,6,6,-10,-12,6,-13,]),'BOOLDCL':([0,3,25,28,30,34,51,70,71,72,73,74,77,78,80,82,],[7,7,-4,-6,-8,-11,-14,-5,-7,-9,7,7,-10,-12,7,-13,]),'WHILE':([0,3,25,28,30,34,51,70,71,72,73,74,77,78,80,82,],[8,8,-4,-6,-8,-11,-14,-5,-7,-9,8,8,-10,-12,8,-13,]),'PRINT':([0,3,25,28,30,34,51,70,71,72,73,74,77,78,80,82,],[9,9,-4,-6,-8,-11,-14,-5,-7,-9,9,9,-10,-12,9,-13,]),'IF':([0,3,25,28,30,34,51,70,71,72,73,74,77,78,80,82,],[10,10,-4,-6,-8,-11,-14,-5,-7,-9,10,10,-10,-12,10,-13,]),'NAME':([0,3,4,6,7,9,13,16,18,24,25,26,28,29,30,31,34,35,36,37,38,39,40,41,42,43,44,45,47,48,51,70,71,72,73,74,77,78,80,82,],[5,5,12,14,15,22,22,22,22,22,-4,22,-6,22,-8,22,-11,22,22,22,22,22,22,22,22,22,22,22,22,22,-14,-5,-7,-9,5,5,-10,-12,5,-13,]),'$end':([1,2,3,11,25,28,30,34,51,70,71,72,77,78,82,],[0,-1,-3,-2,-4,-6,-8,-11,-14,-5,-7,-9,-10,-12,-13,]),'}':([3,11,25,28,30,34,51,70,71,72,75,76,77,78,81,82,],[-3,-2,-4,-6,-8,-11,-14,-5,-7,-9,77,78,-10,-12,82,-13,]),'=':([5,12,14,15,],[13,26,29,31,]),'(':([8,9,10,13,16,18,24,26,29,31,35,36,37,38,39,40,41,42,43,44,45,47,48,],[16,18,24,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'INUMBER':([9,13,16,18,24,26,29,31,35,36,37,38,39,40,41,42,43,44,45,47,48,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'FNUMBER':([9,13,16,18,24,26,29,31,35,36,37,38,39,40,41,42,43,44,45,47,48,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'BOOLVAL':([9,13,16,18,24,26,29,31,35,36,37,38,39,40,41,42,43,44,45,47,48,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),';':([12,14,15,17,19,20,21,22,23,27,50,52,53,55,56,57,58,59,60,61,62,63,64,65,66,67,68,],[25,28,30,34,-29,-30,-31,-33,-32,51,70,71,72,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-15,-27,-28,]),'+':([17,19,20,21,22,23,27,32,33,46,49,50,52,53,55,56,57,58,59,60,61,62,63,64,65,66,67,68,],[35,-29,-30,-31,-33,-32,35,-31,35,35,-31,35,35,-31,35,35,35,35,35,35,35,35,35,35,35,-15,-27,-28,]),'-':([17,19,20,21,22,23,27,32,33,46,49,50,52,53,55,56,57,58,59,60,61,62,63,64,65,66,67,68,],[36,-29,-30,-31,-33,-32,36,-31,36,36,-31,36,36,-31,36,36,36,36,36,36,36,36,36,36,36,-15,-27,-28,]),'*':([17,19,20,21,22,23,27,32,33,46,49,50,52,53,55,56,57,58,59,60,61,62,63,64,65,66,67,68,],[37,-29,-30,-31,-33,-32,37,-31,37,37,-31,37,37,-31,37,37,37,37,37,37,37,37,37,37,37,-15,-27,-28,]),'/':([17,19,20,21,22,23,27,32,33,46,49,50,52,53,55,56,57,58,59,60,61,62,63,64,65,66,67,68,],[38,-29,-30,-31,-33,-32,38,-31,38,38,-31,38,38,-31,38,38,38,38,38,38,38,38,38,38,38,-15,-27,-28,]),'^':([17,19,20,21,22,23,27,32,33,46,49,50,52,53,55,56,57,58,59,60,61,62,63,64,65,66,67,68,],[39,-29,-30,-31,-33,-32,39,-31,39,39,-31,39,39,-31,39,39,39,39,39,39,39,39,39,39,39,-15,-27,-28,]),'GT':([17,19,20,21,22,23,27,32,33,46,49,50,52,53,55,56,57,58,59,60,61,62,63,64,65,66,67,68,],[40,-29,-30,-31,-33,-32,40,-31,40,40,-31,40,40,-31,40,40,40,40,40,40,40,40,40,40,40,-15,-27,-28,]),'LT':([17,19,20,21,22,23,27,32,33,46,49,50,52,53,55,56,57,58,59,60,61,62,63,64,65,66,67,68,],[41,-29,-30,-31,-33,-32,41,-31,41,41,-31,41,41,-31,41,41,41,41,41,41,41,41,41,41,41,-15,-27,-28,]),'GE':([17,19,20,21,22,23,27,32,33,46,49,50,52,53,55,56,57,58,59,60,61,62,63,64,65,66,67,68,],[42,-29,-30,-31,-33,-32,42,-31,42,42,-31,42,42,-31,42,42,42,42,42,42,42,42,42,42,42,-15,-27,-28,]),'LE':([17,19,20,21,22,23,27,32,33,46,49,50,52,53,55,56,57,58,59,60,61,62,63,64,65,66,67,68,],[43,-29,-30,-31,-33,-32,43,-31,43,43,-31,43,43,-31,43,43,43,43,43,43,43,43,43,43,43,-15,-27,-28,]),'EQ':([17,19,20,21,22,23,27,32,33,46,49,50,52,53,55,56,57,58,59,60,61,62,63,64,65,66,67,68,],[44,-29,-30,-31,-33,-32,44,-31,44,44,-31,44,44,-31,44,44,44,44,44,44,44,44,44,44,44,-15,-27,-28,]),'NE':([17,19,20,21,22,23,27,32,33,46,49,50,52,53,55,56,57,58,59,60,61,62,63,64,65,66,67,68,],[45,-29,-30,-31,-33,-32,45,-31,45,45,-31,45,45,-31,45,45,45,45,45,45,45,45,45,45,45,-15,-27,-28,]),')':([19,20,21,22,23,32,46,49,55,56,57,58,59,60,61,62,63,64,65,66,67,68,],[-29,-30,-31,-33,-32,54,66,69,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-15,-27,-28,]),'AND':([19,20,21,22,23,32,49,53,55,56,57,58,59,60,61,62,63,64,65,66,67,68,],[-29,-30,47,-33,-32,47,47,47,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-15,47,47,]),'OR':([19,20,21,22,23,32,49,53,55,56,57,58,59,60,61,62,63,64,65,66,67,68,],[-29,-30,48,-33,-32,48,48,48,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-15,48,48,]),'{':([54,69,79,],[73,74,80,]),'ELSE':([78,],[79,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'prog':([0,],[1,]),'stmts':([0,3,73,74,80,],[2,11,75,76,81,]),'statement':([0,3,73,74,80,],[3,3,3,3,3,]),'expression':([9,13,16,18,24,26,29,31,35,36,37,38,39,40,41,42,43,44,45,47,48,],[17,27,33,46,33,50,52,33,55,56,57,58,59,60,61,62,63,64,65,33,33,]),'boolexp':([9,13,16,18,24,26,29,31,35,36,37,38,39,40,41,42,43,44,45,47,48,],[21,21,32,21,49,21,21,53,21,21,21,21,21,21,21,21,21,21,21,67,68,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> prog","S'",1,None,None,None),
  ('prog -> stmts','prog',1,'p_prog','compi.py',101),
  ('stmts -> statement stmts','stmts',2,'p_statements_recursion','compi.py',108),
  ('stmts -> statement','stmts',1,'p_statements_recursion','compi.py',109),
  ('statement -> INTDCL NAME ;','statement',3,'p_dcl_declare_int','compi.py',119),
  ('statement -> INTDCL NAME = expression ;','statement',5,'p_dcl_declare_int','compi.py',120),
  ('statement -> FLOATDCL NAME ;','statement',3,'p_statement_declare_float','compi.py',139),
  ('statement -> FLOATDCL NAME = expression ;','statement',5,'p_statement_declare_float','compi.py',140),
  ('statement -> BOOLDCL NAME ;','statement',3,'p_statement_declare_bool','compi.py',160),
  ('statement -> BOOLDCL NAME = boolexp ;','statement',5,'p_statement_declare_bool','compi.py',161),
  ('statement -> WHILE ( boolexp ) { stmts }','statement',7,'p_statement_while','compi.py',181),
  ('statement -> PRINT expression ;','statement',3,'p_statement_print','compi.py',189),
  ('statement -> IF ( boolexp ) { stmts }','statement',7,'p_statement_if','compi.py',196),
  ('statement -> IF ( boolexp ) { stmts } ELSE { stmts }','statement',11,'p_statement_if_else','compi.py',206),
  ('statement -> NAME = expression ;','statement',4,'p_statement_assign','compi.py',220),
  ('expression -> ( expression )','expression',3,'p_expression_group','compi.py',239),
  ('expression -> expression + expression','expression',3,'p_expression_binop','compi.py',243),
  ('expression -> expression - expression','expression',3,'p_expression_binop','compi.py',244),
  ('expression -> expression * expression','expression',3,'p_expression_binop','compi.py',245),
  ('expression -> expression / expression','expression',3,'p_expression_binop','compi.py',246),
  ('expression -> expression ^ expression','expression',3,'p_expression_binop','compi.py',247),
  ('boolexp -> expression GT expression','boolexp',3,'p_expression_compar','compi.py',281),
  ('boolexp -> expression LT expression','boolexp',3,'p_expression_compar','compi.py',282),
  ('boolexp -> expression GE expression','boolexp',3,'p_expression_compar','compi.py',283),
  ('boolexp -> expression LE expression','boolexp',3,'p_expression_compar','compi.py',284),
  ('boolexp -> expression EQ expression','boolexp',3,'p_expression_compar','compi.py',285),
  ('boolexp -> expression NE expression','boolexp',3,'p_expression_compar','compi.py',286),
  ('boolexp -> boolexp AND boolexp','boolexp',3,'p_expression_boolop','compi.py',326),
  ('boolexp -> boolexp OR boolexp','boolexp',3,'p_expression_boolop','compi.py',327),
  ('expression -> INUMBER','expression',1,'p_expression_inumber','compi.py',342),
  ('expression -> FNUMBER','expression',1,'p_expression_fnumber','compi.py',351),
  ('expression -> boolexp','expression',1,'p_expression_boolval','compi.py',359),
  ('boolexp -> BOOLVAL','boolexp',1,'p_bool_expression','compi.py',363),
  ('expression -> NAME','expression',1,'p_expression_name','compi.py',371),
]
