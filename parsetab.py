
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND BOOLDCL BOOLVAL BOOLVAL ELSE EQ FLOATDCL FNUMBER FOR GE GT IF INTDCL INUMBER LE LT NAME NE OR PRINT WHILEprog : stmtsstmts : statement stmts\n             | statement statement : INTDCL NAME ";" \n                 | INTDCL NAME "=" expression ";" statement : FLOATDCL NAME ";"\n                 | FLOATDCL NAME "=" expression ";" statement : BOOLDCL NAME ";"\n                 | BOOLDCL NAME "=" boolexp ";" statement : WHILE "(" boolexp ")" "{" stmts "}" statement : FOR "(" statement boolexp ";" statement ")" "{" stmts "}" statement : PRINT expression ";"statement : IF "(" boolexp ")" "{" stmts "}"statement : IF "(" boolexp ")" "{" stmts "}" ELSE "{" stmts "}"statement : NAME "=" expression ";"expression : \'(\' expression \')\'expression : expression \'+\' expression\n                  | expression \'-\' expression\n                  | expression \'*\' expression\n                  | expression \'/\' expression\n                  | expression \'^\' expressionboolexp : expression GT expression\n                  | expression LT expression\n                  | expression GE expression\n                  | expression LE expression\n                  | expression EQ expression\n                  | expression NE expressionboolexp : boolexp AND boolexp\n                  | boolexp OR boolexpexpression : INUMBERexpression : FNUMBERexpression : boolexpboolexp : BOOLVALexpression : NAME'
    
_lr_action_items = {'INTDCL':([0,3,18,27,30,32,37,54,74,75,76,77,78,79,83,85,86,89,90,92,],[4,4,4,-4,-6,-8,-12,-15,-5,-7,-9,4,4,4,-10,-13,4,4,-11,-14,]),'FLOATDCL':([0,3,18,27,30,32,37,54,74,75,76,77,78,79,83,85,86,89,90,92,],[6,6,6,-4,-6,-8,-12,-15,-5,-7,-9,6,6,6,-10,-13,6,6,-11,-14,]),'BOOLDCL':([0,3,18,27,30,32,37,54,74,75,76,77,78,79,83,85,86,89,90,92,],[7,7,7,-4,-6,-8,-12,-15,-5,-7,-9,7,7,7,-10,-13,7,7,-11,-14,]),'WHILE':([0,3,18,27,30,32,37,54,74,75,76,77,78,79,83,85,86,89,90,92,],[8,8,8,-4,-6,-8,-12,-15,-5,-7,-9,8,8,8,-10,-13,8,8,-11,-14,]),'FOR':([0,3,18,27,30,32,37,54,74,75,76,77,78,79,83,85,86,89,90,92,],[9,9,9,-4,-6,-8,-12,-15,-5,-7,-9,9,9,9,-10,-13,9,9,-11,-14,]),'PRINT':([0,3,18,27,30,32,37,54,74,75,76,77,78,79,83,85,86,89,90,92,],[10,10,10,-4,-6,-8,-12,-15,-5,-7,-9,10,10,10,-10,-13,10,10,-11,-14,]),'IF':([0,3,18,27,30,32,37,54,74,75,76,77,78,79,83,85,86,89,90,92,],[11,11,11,-4,-6,-8,-12,-15,-5,-7,-9,11,11,11,-10,-13,11,11,-11,-14,]),'NAME':([0,3,4,6,7,10,14,17,18,20,26,27,28,30,31,32,33,36,37,38,39,40,41,42,43,44,45,46,47,48,50,51,54,74,75,76,77,78,79,83,85,86,89,90,92,],[5,5,13,15,16,24,24,24,5,24,24,-4,24,-6,24,-8,24,24,-12,24,24,24,24,24,24,24,24,24,24,24,24,24,-15,-5,-7,-9,5,5,5,-10,-13,5,5,-11,-14,]),'$end':([1,2,3,12,27,30,32,37,54,74,75,76,83,85,90,92,],[0,-1,-3,-2,-4,-6,-8,-12,-15,-5,-7,-9,-10,-13,-11,-14,]),'}':([3,12,27,30,32,37,54,74,75,76,80,82,83,85,88,90,91,92,],[-3,-2,-4,-6,-8,-12,-15,-5,-7,-9,83,85,-10,-13,90,-11,92,-14,]),'=':([5,13,15,16,],[14,28,31,33,]),'(':([8,9,10,11,14,17,20,26,27,28,30,31,32,33,36,37,38,39,40,41,42,43,44,45,46,47,48,50,51,54,74,75,76,83,85,90,92,],[17,18,20,26,20,20,20,20,-4,20,-6,20,-8,20,20,-12,20,20,20,20,20,20,20,20,20,20,20,20,20,-15,-5,-7,-9,-10,-13,-11,-14,]),'INUMBER':([10,14,17,20,26,27,28,30,31,32,33,36,37,38,39,40,41,42,43,44,45,46,47,48,50,51,54,74,75,76,83,85,90,92,],[21,21,21,21,21,-4,21,-6,21,-8,21,21,-12,21,21,21,21,21,21,21,21,21,21,21,21,21,-15,-5,-7,-9,-10,-13,-11,-14,]),'FNUMBER':([10,14,17,20,26,27,28,30,31,32,33,36,37,38,39,40,41,42,43,44,45,46,47,48,50,51,54,74,75,76,83,85,90,92,],[22,22,22,22,22,-4,22,-6,22,-8,22,22,-12,22,22,22,22,22,22,22,22,22,22,22,22,22,-15,-5,-7,-9,-10,-13,-11,-14,]),'BOOLVAL':([10,14,17,20,26,27,28,30,31,32,33,36,37,38,39,40,41,42,43,44,45,46,47,48,50,51,54,74,75,76,83,85,90,92,],[25,25,25,25,25,-4,25,-6,25,-8,25,25,-12,25,25,25,25,25,25,25,25,25,25,25,25,25,-15,-5,-7,-9,-10,-13,-11,-14,]),';':([13,15,16,19,21,22,23,24,25,29,53,55,56,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,],[27,30,32,37,-30,-31,-32,-34,-33,54,74,75,76,78,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-16,-28,-29,]),'+':([19,21,22,23,24,25,29,34,35,49,52,53,55,56,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,],[38,-30,-31,-32,-34,-33,38,-32,38,38,-32,38,38,-32,-32,38,38,38,38,38,38,38,38,38,38,38,-16,-28,-29,]),'-':([19,21,22,23,24,25,29,34,35,49,52,53,55,56,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,],[39,-30,-31,-32,-34,-33,39,-32,39,39,-32,39,39,-32,-32,39,39,39,39,39,39,39,39,39,39,39,-16,-28,-29,]),'*':([19,21,22,23,24,25,29,34,35,49,52,53,55,56,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,],[40,-30,-31,-32,-34,-33,40,-32,40,40,-32,40,40,-32,-32,40,40,40,40,40,40,40,40,40,40,40,-16,-28,-29,]),'/':([19,21,22,23,24,25,29,34,35,49,52,53,55,56,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,],[41,-30,-31,-32,-34,-33,41,-32,41,41,-32,41,41,-32,-32,41,41,41,41,41,41,41,41,41,41,41,-16,-28,-29,]),'^':([19,21,22,23,24,25,29,34,35,49,52,53,55,56,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,],[42,-30,-31,-32,-34,-33,42,-32,42,42,-32,42,42,-32,-32,42,42,42,42,42,42,42,42,42,42,42,-16,-28,-29,]),'GT':([19,21,22,23,24,25,29,34,35,49,52,53,55,56,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,],[43,-30,-31,-32,-34,-33,43,-32,43,43,-32,43,43,-32,-32,43,43,43,43,43,43,43,43,43,43,43,-16,-28,-29,]),'LT':([19,21,22,23,24,25,29,34,35,49,52,53,55,56,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,],[44,-30,-31,-32,-34,-33,44,-32,44,44,-32,44,44,-32,-32,44,44,44,44,44,44,44,44,44,44,44,-16,-28,-29,]),'GE':([19,21,22,23,24,25,29,34,35,49,52,53,55,56,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,],[45,-30,-31,-32,-34,-33,45,-32,45,45,-32,45,45,-32,-32,45,45,45,45,45,45,45,45,45,45,45,-16,-28,-29,]),'LE':([19,21,22,23,24,25,29,34,35,49,52,53,55,56,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,],[46,-30,-31,-32,-34,-33,46,-32,46,46,-32,46,46,-32,-32,46,46,46,46,46,46,46,46,46,46,46,-16,-28,-29,]),'EQ':([19,21,22,23,24,25,29,34,35,49,52,53,55,56,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,],[47,-30,-31,-32,-34,-33,47,-32,47,47,-32,47,47,-32,-32,47,47,47,47,47,47,47,47,47,47,47,-16,-28,-29,]),'NE':([19,21,22,23,24,25,29,34,35,49,52,53,55,56,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,],[48,-30,-31,-32,-34,-33,48,-32,48,48,-32,48,48,-32,-32,48,48,48,48,48,48,48,48,48,48,48,-16,-28,-29,]),')':([21,22,23,24,25,27,30,32,34,37,49,52,54,59,60,61,62,63,64,65,66,67,68,69,70,71,72,74,75,76,81,83,85,90,92,],[-30,-31,-32,-34,-33,-4,-6,-8,57,-12,70,73,-15,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-16,-28,-29,-5,-7,-9,84,-10,-13,-11,-14,]),'AND':([21,22,23,24,25,34,52,56,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,],[-30,-31,50,-34,-33,50,50,50,50,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-16,50,50,]),'OR':([21,22,23,24,25,34,52,56,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,],[-30,-31,51,-34,-33,51,51,51,51,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-16,51,51,]),'{':([57,73,84,87,],[77,79,86,89,]),'ELSE':([85,],[87,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'prog':([0,],[1,]),'stmts':([0,3,77,79,86,89,],[2,12,80,82,88,91,]),'statement':([0,3,18,77,78,79,86,89,],[3,3,36,3,81,3,3,3,]),'expression':([10,14,17,20,26,28,31,33,36,38,39,40,41,42,43,44,45,46,47,48,50,51,],[19,29,35,49,35,53,55,35,35,59,60,61,62,63,64,65,66,67,68,69,35,35,]),'boolexp':([10,14,17,20,26,28,31,33,36,38,39,40,41,42,43,44,45,46,47,48,50,51,],[23,23,34,23,52,23,23,56,58,23,23,23,23,23,23,23,23,23,23,23,71,72,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> prog","S'",1,None,None,None),
  ('prog -> stmts','prog',1,'p_prog','compi.py',102),
  ('stmts -> statement stmts','stmts',2,'p_statements_recursion','compi.py',109),
  ('stmts -> statement','stmts',1,'p_statements_recursion','compi.py',110),
  ('statement -> INTDCL NAME ;','statement',3,'p_dcl_declare_int','compi.py',120),
  ('statement -> INTDCL NAME = expression ;','statement',5,'p_dcl_declare_int','compi.py',121),
  ('statement -> FLOATDCL NAME ;','statement',3,'p_statement_declare_float','compi.py',140),
  ('statement -> FLOATDCL NAME = expression ;','statement',5,'p_statement_declare_float','compi.py',141),
  ('statement -> BOOLDCL NAME ;','statement',3,'p_statement_declare_bool','compi.py',161),
  ('statement -> BOOLDCL NAME = boolexp ;','statement',5,'p_statement_declare_bool','compi.py',162),
  ('statement -> WHILE ( boolexp ) { stmts }','statement',7,'p_statement_while','compi.py',182),
  ('statement -> FOR ( statement boolexp ; statement ) { stmts }','statement',10,'p_statement_for','compi.py',190),
  ('statement -> PRINT expression ;','statement',3,'p_statement_print','compi.py',200),
  ('statement -> IF ( boolexp ) { stmts }','statement',7,'p_statement_if','compi.py',207),
  ('statement -> IF ( boolexp ) { stmts } ELSE { stmts }','statement',11,'p_statement_if_else','compi.py',217),
  ('statement -> NAME = expression ;','statement',4,'p_statement_assign','compi.py',231),
  ('expression -> ( expression )','expression',3,'p_expression_group','compi.py',250),
  ('expression -> expression + expression','expression',3,'p_expression_binop','compi.py',254),
  ('expression -> expression - expression','expression',3,'p_expression_binop','compi.py',255),
  ('expression -> expression * expression','expression',3,'p_expression_binop','compi.py',256),
  ('expression -> expression / expression','expression',3,'p_expression_binop','compi.py',257),
  ('expression -> expression ^ expression','expression',3,'p_expression_binop','compi.py',258),
  ('boolexp -> expression GT expression','boolexp',3,'p_expression_compar','compi.py',292),
  ('boolexp -> expression LT expression','boolexp',3,'p_expression_compar','compi.py',293),
  ('boolexp -> expression GE expression','boolexp',3,'p_expression_compar','compi.py',294),
  ('boolexp -> expression LE expression','boolexp',3,'p_expression_compar','compi.py',295),
  ('boolexp -> expression EQ expression','boolexp',3,'p_expression_compar','compi.py',296),
  ('boolexp -> expression NE expression','boolexp',3,'p_expression_compar','compi.py',297),
  ('boolexp -> boolexp AND boolexp','boolexp',3,'p_expression_boolop','compi.py',337),
  ('boolexp -> boolexp OR boolexp','boolexp',3,'p_expression_boolop','compi.py',338),
  ('expression -> INUMBER','expression',1,'p_expression_inumber','compi.py',353),
  ('expression -> FNUMBER','expression',1,'p_expression_fnumber','compi.py',362),
  ('expression -> boolexp','expression',1,'p_expression_boolval','compi.py',370),
  ('boolexp -> BOOLVAL','boolexp',1,'p_bool_expression','compi.py',374),
  ('expression -> NAME','expression',1,'p_expression_name','compi.py',382),
]
